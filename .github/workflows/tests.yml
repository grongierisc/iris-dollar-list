# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  tests:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install coverage 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        python -m unittest discover -t src/ -s src/tests/ -v
    - name: Run coverage
      run: |
        python3 -m coverage run --source src/ --branch -m unittest discover -t src/ -s src/tests/ -v
    - name: "Upload coverage data"
      uses: actions/upload-artifact@v3
      with:
        name: covdata
        path: .coverage

  coverage:
      name: Coverage
      needs: tests
      runs-on: ubuntu-latest
      steps:
        - name: "Check out the repo"
          uses: "actions/checkout@v2"

        - name: "Set up Python"
          uses: "actions/setup-python@v2"
          with:
            python-version: "3.10"

        - name: "Install dependencies"
          run: |
            python -m pip install coverage

        - name: "Download coverage data"
          uses: actions/download-artifact@v3
          with:
            name: covdata

        - name: Make JSON coverage
          run: |
            python3 -m coverage json --data-file .coverage -o coverage.json

        - name: "Combine"
          run: |
            export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
            echo "total=$TOTAL" >> $GITHUB_ENV
            echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY

        - name: "Make badge"
          uses: schneegans/dynamic-badges-action@v1.4.0
          with:
            # GIST_TOKEN is a GitHub personal access token with scope "gist".
            auth: ${{ secrets.GIST_SECRET }}
            gistID: de6821ab77160e603e25e79f847d9863   # replace with your real Gist id.
            filename: covbadge.json
            label: Coverage
            message: ${{ env.total }}%
            minColorRange: 50
            maxColorRange: 90
            valColorRange: ${{ env.total }}

